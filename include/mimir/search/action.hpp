/*
 * Copyright (C) 2023 Dominik Drexler and Simon Stahlberg
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */

#pragma once

#include "mimir/cista/storage/unordered_set.h"
#include "mimir/cista/storage/vector.h"
#include "mimir/common/printers.hpp"
#include "mimir/common/types_cista.hpp"
#include "mimir/formalism/declarations.hpp"
#include "mimir/search/declarations.hpp"

#include <cista/containers/tuple.h>
#include <ostream>
#include <tuple>

namespace mimir
{
struct StripsActionPrecondition
{
    FlatBitset m_positive_static_atoms;
    FlatBitset m_negative_static_atoms;
    FlatBitset m_positive_fluent_atoms;
    FlatBitset m_negative_fluent_atoms;
    FlatBitset m_positive_derived_atoms;
    FlatBitset m_negative_derived_atoms;

    template<PredicateCategory P>
    FlatBitset& get_positive_precondition();

    template<PredicateCategory P>
    const FlatBitset& get_positive_precondition() const;

    template<PredicateCategory P>
    FlatBitset& get_negative_precondition();

    template<PredicateCategory P>
    const FlatBitset& get_negative_precondition() const;

    template<DynamicPredicateCategory P>
    bool is_applicable(State state) const;

    bool is_dynamically_applicable(State state) const;

    bool is_statically_applicable(const FlatBitset& static_positive_atoms) const;

    bool is_applicable(Problem problem, State state) const;

    template<PredicateCategory P>
    bool is_applicable(const FlatBitset& atoms) const;

    bool is_applicable(const FlatBitset& fluent_state_atoms, const FlatBitset& derived_state_atoms, const FlatBitset& static_initial_atoms) const;
};

struct StripsActionEffect
{
    FlatBitset m_positive_effects;
    FlatBitset m_negative_effects;

    FlatBitset& get_positive_effects();

    const FlatBitset& get_positive_effects() const;

    FlatBitset& get_negative_effects();

    const FlatBitset& get_negative_effects() const;
};

/// @brief `SimpleEffect` encapsulates the effect on a single grounded atom.
/// We cannot consistently use cista::tuple since nested tuples will automatically be flattened.
struct SimpleEffect
{
    bool is_negated;
    uint32_t atom_index;
};

struct ConditionalEffect
{
    FlatIndexList m_positive_static_atoms;
    FlatIndexList m_negative_static_atoms;
    FlatIndexList m_positive_fluent_atoms;
    FlatIndexList m_negative_fluent_atoms;
    FlatIndexList m_positive_derived_atoms;
    FlatIndexList m_negative_derived_atoms;
    SimpleEffect m_effect;

    /* Precondition */

    template<PredicateCategory P>
    FlatIndexList& get_positive_precondition();

    template<PredicateCategory P>
    const FlatIndexList& get_positive_precondition() const;

    template<PredicateCategory P>
    FlatIndexList& get_negative_precondition();

    template<PredicateCategory P>
    const FlatIndexList& get_negative_precondition() const;

    /* Simple effects */
    SimpleEffect& get_simple_effect();

    const SimpleEffect& get_simple_effect() const;

    template<DynamicPredicateCategory P>
    bool is_applicable(State state) const;

    bool is_dynamically_applicable(State state) const;

    bool is_statically_applicable(Problem problem) const;

    bool is_applicable(Problem problem, State state) const;
};

using ConditionalEffects = cista::offset::vector<ConditionalEffect>;

/**
 * Implementation class
 *
 * Reads the memory layout generated by the search node builder.
 */
class GroundActionImpl
{
private:
    Index m_index;
    Index m_action_index;
    ContinuousCost m_cost;
    FlatIndexList m_objects;
    StripsActionPrecondition m_strips_precondition;
    StripsActionEffect m_strips_effect;
    ConditionalEffects m_conditional_effects;

public:
    Index& get_index();
    Index& get_action_index();
    ContinuousCost& get_cost();
    FlatIndexList& get_objects();

    Index get_index() const;
    Index get_action_index() const;
    ContinuousCost get_cost() const;
    const FlatIndexList& get_object_indices() const;

    /* STRIPS part */
    StripsActionPrecondition& get_strips_precondition();
    const StripsActionPrecondition& get_strips_precondition() const;
    StripsActionEffect& get_strips_effect();
    const StripsActionEffect& get_strips_effect() const;
    /* Conditional effects */
    ConditionalEffects& get_conditional_effects();
    const ConditionalEffects& get_conditional_effects() const;

    bool is_dynamically_applicable(State state) const;

    bool is_statically_applicable(const FlatBitset& static_positive_atoms) const;

    bool is_applicable(Problem problem, State state) const;
};

extern bool operator==(const GroundActionImpl& lhs, const GroundActionImpl& rhs);

}

template<>
struct cista::storage::DerefStdHasher<mimir::GroundActionImpl>
{
    size_t operator()(const mimir::GroundActionImpl* ptr) const;
};

template<>
struct cista::storage::DerefStdEqualTo<mimir::GroundActionImpl>
{
    bool operator()(const mimir::GroundActionImpl* lhs, const mimir::GroundActionImpl* rhs) const;
};

namespace mimir
{

/**
 * Mimir types
 */

using FlatActionSet = cista::storage::UnorderedSet<GroundActionImpl>;

using GroundActionList = std::vector<GroundAction>;
using GroundActionSet = std::unordered_set<GroundAction>;

/**
 * Pretty printing
 */

template<>
std::ostream& operator<<(std::ostream& os, const std::tuple<SimpleEffect, const PDDLFactories&>& data);

template<>
std::ostream& operator<<(std::ostream& os, const std::tuple<StripsActionPrecondition, const PDDLFactories&>& data);

template<>
std::ostream& operator<<(std::ostream& os, const std::tuple<StripsActionEffect, const PDDLFactories&>& data);

template<>
std::ostream& operator<<(std::ostream& os, const std::tuple<ConditionalEffect, const PDDLFactories&>& data);

template<>
std::ostream& operator<<(std::ostream& os, const std::tuple<GroundAction, const PDDLFactories&>& data);

template<>
std::ostream& operator<<(std::ostream& os, const std::tuple<const PDDLFactories&, GroundAction>& data);

}
