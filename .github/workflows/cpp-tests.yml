name: Test CPP Library

on: [ push, pull_request ]

jobs:
  load-config:
    uses: ./.github/workflows/read-matrix-file.yml
    with:
      matrix_file: 'build-matrix.json'

  test:
    needs: load-config
    name: Test • ${{ matrix.config.os }} • ${{ matrix.config.cc }}-${{ matrix.config.compiler_version }} • ${{ matrix.config.build_type }}
    runs-on: ${{ matrix.config.os }}
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    strategy:
      fail-fast: false
      matrix:
        config: ${{ fromJson(needs.load-config.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v4

      - name: Build & Test
        uses: ./.github/.actions/cpp-build
        with:
          env: "GTEST_OUTPUT=xml:test-results GTEST_COLOR=1"
          os: ${{ matrix.config.os }}
          cc: ${{ matrix.config.cc }}
          cxx: ${{ matrix.config.cxx }}
          compiler_version: ${{ matrix.config.compiler_version }}
          build_type: ${{ matrix.config.build_type }}
          skip_testing: 'false'
          skip_pymimir: 'true'

      - name: ls build
        run: ls -lR .

      - name: Upload lib test result artifacts
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: gtest-results-${{ matrix.config.os }}-${{ matrix.config.cc }}-${{ matrix.config.compiler_version }}
          path: ./build/**/test-results.xml
          retention-days: 1

      - name: Create Mimir Conan Package
        shell: bash
        env:
          VERBOSE: "1"
        run: |
          ls -lR . && \
          conan create . \
          -c 'tools.build:skip_test=True' \
          -o 'pymimir/*:with_pybindings=False' \ 
          -s 'compiler.cppstd=gnu20'

      - name: Configure Integration Tests
        shell: bash
        run: >
          conan test tests/integration "mimir/*"
#          GTEST_COLOR=1 ctest -V

  publish-gtest-results:
    name: "Publish GTest Results"
    needs: test
    runs-on: ubuntu-latest
    if: always()
    permissions:
      checks: write
      pull-requests: write

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: gtest-results-*
          path: ./artifacts/gtest-results_downloaded
          merge-multiple: true

      - name: Display structure of downloaded files
        shell: bash
        run: ls ./artifacts/gtest-results_downloaded

      - name: Publish Unit Test Results
        if: ${{ startsWith(matrix.config.os, 'ubuntu') }}
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: ./artifacts/**/*.xml

      - name: Publish Unit Test Results
        if: ${{ startsWith(matrix.config.os, 'macos') }}
        uses: EnricoMi/publish-unit-test-result-action/macos@v2
        with:
          files: ./artifacts/**/*.xml
